import com.github.spotbugs.snom.SpotBugsTask

import java.nio.charset.StandardCharsets

plugins {
    id "java-library"
    id "checkstyle"
    id "pmd"
    id "jacoco"
    id "com.github.ben-manes.versions" version "0.28.0"
    id "org.sonarqube" version "2.8"
    id "com.github.spotbugs" version "4.0.4"
}

apply from: rootProject.file("gradle/code-quality.gradle")

group = "com.tomash.gombosh.api"
version = "1.0.0"
description = "Java + Google Guice + Retrofit2 + Gradle + Junit5 API test demo "

sourceCompatibility = JavaVersion.VERSION_11

ext {
    encoding = StandardCharsets.UTF_8.toString()
    retrofit2Version = "2.8.0"
    spotbugVersion = "4.0.1"
    log4j2Version = "2.13.1"
    lombokVersion = "1.18.12"
}

tasks.withType(JavaCompile).configureEach {
    options.incremental = true
    options.encoding = encoding
    options.compilerArgs += ["-Xlint", "-Xlint:-processing"]
}

tasks.withType(Javadoc).configureEach {
    options.encoding = encoding
}

spotbugs {
    toolVersion = "$spotbugVersion"
}

tasks.withType(SpotBugsTask).configureEach {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

repositories {
    jcenter()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    api("org.apache.logging.log4j:log4j-api:$log4j2Version")
    api("com.squareup.retrofit2:retrofit:$retrofit2Version")
    api("com.google.inject:guice:4.2.3")
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    compileOnly("com.github.spotbugs:spotbugs-annotations:$spotbugVersion")
    implementation("com.squareup.retrofit2:converter-gson:$retrofit2Version")
    implementation("com.squareup.okhttp3:logging-interceptor:4.4.1")
    testImplementation("org.junit.jupiter:junit-jupiter:5.6.1")
    testImplementation("org.assertj:assertj-core:3.15.0")
    testImplementation("com.squareup.retrofit2:retrofit-mock:$retrofit2Version")
    testRuntimeOnly("org.apache.logging.log4j:log4j-core:$log4j2Version")
    testRuntimeOnly("org.apache.logging.log4j:log4j-jul:$log4j2Version")
    testRuntimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version")
}

test {
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    testLogging.showStandardStreams = true
    systemProperties = System.properties + [
            "file.encoding"            : encoding,
            "java.util.logging.manager": "org.apache.logging.log4j.jul.LogManager"
    ] as Map<String, ?>
    maxParallelForks = (int) (Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}

wrapper {
    gradleVersion = "6.3"
}